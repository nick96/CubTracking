package me.nspain.cubtracking.badgework

import de.codecentric.hikaku.Hikaku
import de.codecentric.hikaku.HikakuConfig
import de.codecentric.hikaku.converters.openapi.OpenApiConverter
import de.codecentric.hikaku.converters.spring.SpringConverter
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.context.ApplicationContext
import java.nio.file.Paths


@SpringBootTest
class SpecificationMatchesImplementationTest {

    @Autowired
    lateinit var springContext: ApplicationContext

    @Test
    fun `specification matches implementation`() {
        val res = this::class.java.classLoader.getResource("openapi: \"3.0.0\"\n\ninfo:\n  title: Cub Badgework Tracking API\n  version: 0.0.1\n  description: |\n    The Cub Badgework Tracking API is an API that provides endpoints that\n    allow us to keep track of how Cubs are progressing with their badgework.\n  license:\n    name: MIT\n    url: https://mit-license.org/\n\nservers:\n  - url: https://api.cubs.nspain.me/badgework/v1\n    description: Production server\n  - url: http://localhost:8081/badgework/v1\n    description: Local server\n\n# By default endpoints are secured by the authz_id security scheme\nsecurity:\n  - authz_id: []\n\npaths:\n  /:\n    get:\n      operationId: apiDocs\n      description: Return the API documentation as defined here.\n      responses:\n        '200':\n          description: API documentation\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /cubs:\n    get:\n      operationId: getCubs\n      description: Get a collection of all registered cubs with their associated badgework.\n      parameters:\n        - name: name\n          in: query\n          description: Name to filter the collection of cubs returned\n          required: false\n          style: form\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Registered cubs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Cub'\n\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: postCubs\n      description: Register a new cub.\n      requestBody:\n        description: Cub to register\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewCub'\n      responses:\n        '201':\n          description: Created cub\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cub'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /cubs/{id}:\n    get:\n      operationId: getCub\n      description: Get a cub by ID.\n      parameters:\n        - name: id\n          in: path\n          description: ID of the cub to fetch.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Registered cub\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cub'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: putCub\n      description: Update the cub at ID.\n      parameters:\n        - name: id\n          in: path\n          description: ID of the cub to fetch.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Updated cub\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cub'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: deleteCub\n      description: Delete the cub at ID.\n      parameters:\n        - name: id\n          in: path\n          description: ID of the cub to fetch.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Deleted cub\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cub'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  schemas:\n    NewCub:\n      description: |\n        Object to create a new cub. This is really just a less strict `Cub` that doesn't\n        require fields for achievement awards.\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        bronzeBoomerang:\n          $ref: '#/components/schemas/Boomerang'\n        silverBoomerang:\n          $ref: '#/components/schemas/Boomerang'\n        goldBoomerang:\n          $ref: '#/components/schemas/Boomerang'\n        events:\n          $ref: '#/components/schemas/Event'\n        achievementBadges:\n          type: array\n          items:\n            $ref: '#/components/schemas/AchievementBadge'\n        specialInterestBadges:\n          type: array\n          items:\n            $ref: '#/components/schemas/SpecialInterestBadge'\n    Cub:\n      allOf:\n        - $ref: '#/components/schemas/NewCub'\n        - required:\n            - id\n          properties:\n            id:\n              type: integer\n              format: int64\n              readOnly: true\n    AuthenticationResponse:\n      required:\n        - apiToken\n      properties:\n        apiToken:\n          description: API token for accessing `authz_id` secured endpoints\n          type: string\n          readOnly: true\n    Error:\n      required:\n        - message\n        - details\n      properties:\n        message:\n          type: string\n        details:\n          type: array\n          items:\n            type: string\n\n    # Sub schemas - not directory exposed in the API\n    Completable:\n      description: Fields required for an object to be completable\n      properties:\n        dateCompleted:\n          description: Date the object was completed on\n          type: string\n          format: date\n        signedOfBy:\n          description: Person who signed off the completable object\n          type: string\n    Component:\n      description: Component of a badge or boomerang\n      allOf:\n        - $ref: '#/components/schemas/Completable'\n        - required:\n            - task\n            - description\n          properties:\n            task:\n              description: Task required to be performed\n              type: string\n            description:\n              description: Description of the task to be performed\n              type: string\n    Boomerang:\n      allOf:\n        - $ref: '#/components/schemas/Completable'\n        - required:\n            - name\n            - tasks\n          properties:\n            name:\n              description: Name of the boomerang\n              type: string\n            tasks:\n              description: Tasks required to complete the boomerang\n              type: array\n              items:\n                $ref: '#/components/schemas/Component'\n            requiredTasks:\n              description: Array of tasks that are required to be completed. If omitted, all tasks are required.\n              type: array\n              items:\n                type: integer\n                format: int64\n            numRequiredTasks:\n              description: Total number of tasks required to be completed. This includes the tasks in `requiredTasks`\n              type: integer\n              format: int64\n    Badge:\n      allOf:\n        - $ref: '#/components/schemas/Completable'\n        - required:\n            - name\n            - components\n            - numRequiredComponents\n          properties:\n            name:\n              description: Name of the badge\n              type: string\n            components:\n              description: Components that make up the badge\n              type: array\n              items:\n                $ref: '#/components/schemas/Component'\n    SpecialInterestBadge:\n      allOf:\n        - $ref: '#/components/schemas/Component'\n    AchievementBadge:\n      allOf:\n        - $ref: '#/components/schemas/Badge'\n        - required:\n            - level\n          properties:\n            level:\n              description: Badge level (1 or 2)\n              type: integer\n              format: int64\n              enum:\n                - 1\n                - 2\n    Event:\n      description: Event the cub has attended\n      allOf:\n        - $ref: '#/components/schemas/Completable'\n        - required:\n            - name\n          properties:\n            name:\n              description: Name of the event attended\n              type: string\n\n  securitySchemes:\n    authz_id:\n      type: apiKey\n      name: Authorization\n      in: header\n")
        val uri = res.toURI()
        val path = Paths.get(uri)
        Hikaku(
                specification = OpenApiConverter(path),
                implementation = SpringConverter(springContext),
                config = HikakuConfig(
                        ignorePaths = setOf(SpringConverter.IGNORE_ERROR_ENDPOINT),
                        ignoreHttpMethodOptions = true,
                        ignoreHttpMethodHead = true
                )
        ).match()
    }
}